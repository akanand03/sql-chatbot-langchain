# importing the lib
import os
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.llms import OpenAI
from langchain_community.chat_models import ChatOpenAI
from langchain_community.utilities import SQLDatabase  # Updated import
from langchain_community.agent_toolkits import SQLDatabaseToolkit

class ChatWithSql:
    """ChatWithSql class is used for chat and query user questions with the SQL database"""
    def __init__(self, db_user, db_password, db_host, db_name, api_key):
        """This is a Constructor method of the ChatWithSql class"""
        self.db_user = db_user
        self.db_password = db_password
        self.db_host = db_host
        self.db_name = db_name

        # Set API key directly
        os.environ["OPENAI_API_KEY"] = api_key

    def message(self, query):
        """message method will take the query from the user and process the result and return the response

        Args:
            query (String): this is the question of the user
        Returns:
            response (String): This is the response generated by llms
        """
        # Initializing the llm
        llm = ChatOpenAI(model_name="gpt-3.5-turbo")

        # Connecting with db
        db = SQLDatabase.from_uri(f"mysql+pymysql://{self.db_user}:{self.db_password}@{self.db_host}/{self.db_name}")

        # Initializing the toolkit
        toolkit = SQLDatabaseToolkit(db=db, llm=llm)

        # Creating the agent executor
        agent_executor = create_sql_agent(
            llm=llm,
            toolkit=toolkit,
            verbose=True
        )
         
        response = agent_executor.run(query)
        return response

if __name__ == "__main__":
    # Sample usage
    api_key = "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"
    obj = ChatWithSql("newuser", "newpassword", "localhost", "example_db", api_key)
    print(obj.message("How many rows do we have in customers table?"))
